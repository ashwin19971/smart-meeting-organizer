{"version":3,"sources":["components/NoPage/index.js","components/Button/Button.js","utils/utilFunctions.js","modules/MeetingOrganizer/api/index.js","modules/MeetingOrganizer/components/AddMeeting/AddMeeting.js","modules/MeetingOrganizer/pages/HomePage.js","routes/index.js","models/routes.js","containers/App/index.js","index.js"],"names":["NoPage","Button","onClick","value","disabled","className","todayDate","Date","toISOString","slice","getTimeInBetween","time","startTime","endTime","parseDate","date","parts","split","newDate","Number","setHours","setMinutes","formatDate","generateUniqueId","id","getTime","String","BUILDINGS_QUERY","gql","MEETING_ROOMS_QUERY","MEETINGS_QUERY","SCHEDULE_MEETING_QUERY","ReactModal","setAppElement","AddMeeting","isModalOpen","toggleModal","buildings","isBuildingLoading","useState","isNextBtnClicked","clickNextBtn","bookingTitle","setBookingTitle","bookingDate","setBookingDate","setStartTime","setEndTime","buildingId","selectBuilding","selectedRoomId","selectMeetingRoom","useQuery","Building","data","isBuildingInfoLoading","loading","buildingInfo","get","meetingRooms","freeMeetingRooms","length","rooms","bStartTime","bEndTime","bookingStartTime","bookingEndTime","filter","room","meetings","i","meetingStartTime","meetingEndTime","getFreeMeetingRooms","useMutation","scheduleMeeting","isMeetingScheduling","overlayClassName","isOpen","onRequestClose","shouldCloseOnOverlayClick","map","name","floor","variables","title","meetingRoomId","htmlFor","type","onChange","e","target","min","selected","hidden","key","defaultProps","HomePage","Buildings","MeetingRooms","isRoomLoading","Meetings","areMeetingsLoading","freeRoomsNow","currentTime","getFreeRooms","todayMeetings","todayStartTime","todayEndTime","meeting","getTodayMeetings","currentMeetings","getMeetingsGoingOnNow","Routes","path","exact","component","from","to","React","Component","App","client","ApolloClient","uri","cache","InMemoryCache","headers","token","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d51645c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./NoPage.scss\";\r\n\r\nconst NoPage = () => <div>Page not found</div>;\r\n\r\nexport default NoPage;\r\n","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ onClick, value, disabled }) => (\r\n  <button\r\n    onClick={onClick}\r\n    className=\"common-button\"\r\n    disabled={disabled}\r\n  >\r\n    {value}\r\n  </button>\r\n);\r\n\r\nexport default Button;","export const todayDate = new Date().toISOString().slice(0, -14);\r\n\r\nexport const getFreeRooms = rooms => {\r\n  const currentTime = new Date();\r\n  const freeRooms = rooms.filter(room => {\r\n    const { meetings = [] } = room;\r\n    for (let i = 0; i < meetings.length; i++) {\r\n      const meetingStartTime = parseDate(meetings[i].date, meetings[i].startTime);\r\n      const meetingEndTime = parseDate(meetings[i].date, meetings[i].endTime);\r\n      if (getTimeInBetween(currentTime, meetingStartTime, meetingEndTime)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n  return freeRooms;\r\n};\r\n\r\nexport const getTodayMeetings = meetings => {\r\n  const todayStartTime = new Date();\r\n  todayStartTime.setHours(0);\r\n  todayStartTime.setMinutes(0);\r\n\r\n  const todayEndTime = new Date();\r\n  todayEndTime.setHours(23);\r\n  todayEndTime.setMinutes(59);\r\n\r\n  const todayMeetings = meetings.filter(meeting => {\r\n    const {\r\n      date,\r\n      startTime,\r\n      endTime\r\n    } = meeting;\r\n    const meetingStartTime = parseDate(date, startTime);\r\n    const meetingEndTime = parseDate(date, endTime);\r\n    return getTimeInBetween(meetingStartTime, todayStartTime, todayEndTime) || getTimeInBetween(meetingEndTime, todayStartTime, todayEndTime);\r\n  });\r\n\r\n  return todayMeetings;\r\n};\r\n\r\nexport const getMeetingsGoingOnNow = meetings => { \r\n  const currentTime = new Date();\r\n  const currentMeetings = meetings.filter(meeting => {\r\n    const {\r\n      date,\r\n      startTime,\r\n      endTime\r\n    } = meeting;\r\n    const meetingStartTime = parseDate(date, startTime);\r\n    const meetingEndTime = parseDate(date, endTime);\r\n    return getTimeInBetween(currentTime, meetingStartTime, meetingEndTime);\r\n  });\r\n\r\n  return currentMeetings;\r\n}\r\n\r\nconst getTimeInBetween = (time, startTime, endTime) => time > startTime && time < endTime;\r\n\r\nconst parseDate = (date, time) => {\r\n  const parts = date.split(\"/\");\r\n  const newDate = new Date(Number(parts[2]), Number(parts[1]) - 1, Number(parts[0]));\r\n  newDate.setHours(Number(time.split(\":\")[0]));\r\n  newDate.setMinutes(Number(time.split(\":\")[1]));\r\n  return newDate;\r\n};\r\n\r\nexport const formatDate = date => {\r\n  const parts = date.split(\"-\");\r\n  return `${parts[2]}/${parts[1]}/${parts[0]}`;\r\n};\r\n\r\nexport const generateUniqueId = () => {\r\n  let id = new Date().getTime();\r\n  return Number(String(id).slice(6));\r\n};\r\n\r\nexport const getFreeMeetingRooms = (rooms, bookingDate, bStartTime, bEndTime) => {\r\n  const bookingStartTime = parseDate(bookingDate, bStartTime);\r\n  const bookingEndTime = parseDate(bookingDate, bEndTime);\r\n  const freeRooms = rooms.filter(room => {\r\n    const { meetings = [] } = room;\r\n    for (let i = 0; i < meetings.length; i++) {\r\n      const meetingStartTime = parseDate(meetings[i].date, meetings[i].startTime);\r\n      const meetingEndTime = parseDate(meetings[i].date, meetings[i].endTime);\r\n      if (\r\n        getTimeInBetween(bookingStartTime, meetingStartTime, meetingEndTime) ||\r\n        getTimeInBetween(bookingEndTime, meetingStartTime, meetingEndTime)\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  });\r\n  return freeRooms;\r\n}\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const BUILDINGS_QUERY = gql`\r\n  {\r\n    Buildings {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MEETING_ROOMS_QUERY = gql` \r\n  {\r\n    MeetingRooms {\r\n      id\r\n      name\r\n      floor\r\n      building {\r\n        name\r\n      }\r\n      meetings {\r\n        id\r\n        title\r\n        date\r\n        startTime\r\n        endTime\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const MEETINGS_QUERY = gql` \r\n  {\r\n    Meetings {\r\n      id\r\n      title\r\n      date\r\n      startTime\r\n      endTime\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBuildingQuery = id => gql`\r\n  {\r\n    Building(id: ${id}){\r\n      id\r\n      name\r\n      meetingRooms {\r\n        id\r\n        name\r\n        floor\r\n        meetings{\r\n          id\r\n          title\r\n          date\r\n          startTime\r\n          endTime\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SCHEDULE_MEETING_QUERY = gql`\r\n  mutation Meeting(\r\n    $id: Int!,\r\n    $title: String!,\r\n    $date: String!,\r\n    $startTime: String!,\r\n    $endTime: String!,\r\n    $meetingRoomId: Int!\r\n  ) {\r\n    Meeting(\r\n      id: $id,\r\n      title: $title,\r\n      date: $date,\r\n      startTime: $startTime,\r\n      endTime: $endTime,\r\n      meetingRoomId: $meetingRoomId\r\n    ) {\r\n      id,\r\n      title\r\n    }\r\n  }\r\n`;\r\n","import { useMutation, useQuery } from '@apollo/client';\r\nimport { get } from 'lodash';\r\nimport React, { useState } from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport { array, bool, func } from 'prop-types';\r\n\r\nimport Button from '../../../../components/Button';\r\nimport { formatDate, generateUniqueId, getFreeMeetingRooms, todayDate } from '../../../../utils/utilFunctions';\r\nimport { getBuildingQuery, SCHEDULE_MEETING_QUERY } from '../../api/index';\r\nimport './AddMeeting.scss';\r\n\r\nReactModal.setAppElement('body');\r\n\r\nexport const AddMeeting = ({ isModalOpen, toggleModal, buildings, isBuildingLoading }) => {\r\n\r\n  const [isNextBtnClicked, clickNextBtn] = useState(false);\r\n  const [bookingTitle, setBookingTitle] = useState('');\r\n  const [bookingDate, setBookingDate] = useState();\r\n  const [startTime, setStartTime] = useState();\r\n  const [endTime, setEndTime] = useState();\r\n  const [buildingId, selectBuilding] = useState();\r\n  const [selectedRoomId, selectMeetingRoom] = useState();\r\n\r\n  const { data: Building, loading: isBuildingInfoLoading } = useQuery(getBuildingQuery(buildingId || -1));\r\n  const buildingInfo = get(Building, 'Building', {});\r\n  const meetingRooms = get(buildingInfo, 'meetingRooms', []);\r\n  const freeMeetingRooms = meetingRooms.length ? getFreeMeetingRooms(meetingRooms, formatDate(bookingDate), startTime, endTime) : [];\r\n\r\n  const [scheduleMeeting, { loading: isMeetingScheduling }] = useMutation(SCHEDULE_MEETING_QUERY);\r\n\r\n  const handleScheduleMeeting = () => {\r\n    scheduleMeeting({\r\n      variables:{\r\n        id: generateUniqueId(),\r\n        title: bookingTitle,\r\n        date: formatDate(bookingDate),\r\n        startTime: startTime,\r\n        endTime: endTime,\r\n        meetingRoomId: selectedRoomId\r\n      }\r\n    });\r\n    !isMeetingScheduling && toggleModal(!isModalOpen);\r\n  };\r\n\r\n  return (\r\n    <ReactModal\r\n      overlayClassName='overlay'\r\n      className='modal'\r\n      isOpen={isModalOpen}\r\n      onRequestClose={toggleModal}\r\n      shouldCloseOnOverlayClick\r\n    >\r\n      {\r\n        !isNextBtnClicked ?\r\n          <div className='add-meeting-wrapper'>\r\n            <h2>Add Meeting</h2>\r\n            <div className='add-meeting-line-item'>\r\n              <label htmlFor=\"booking-title\">Title:</label>\r\n              <input\r\n                type=\"input\"\r\n                id=\"booking-title\"\r\n                name=\"booking-title\"\r\n                onChange={(e) => setBookingTitle(e.target.value)}\r\n                value={bookingTitle}\r\n              />\r\n            </div>\r\n            <div className='add-meeting-line-item'>\r\n              <label htmlFor=\"booking-date\">Date:</label>\r\n              <input\r\n                type=\"date\"\r\n                id=\"booking-date\"\r\n                name=\"booking-date\"\r\n                min={todayDate}\r\n                onChange={(e) => setBookingDate(e.target.value)}\r\n                value={bookingDate}\r\n              />\r\n            </div>\r\n            <div className='add-meeting-line-item'>\r\n              <label htmlFor=\"start-time\">Start Time:</label>\r\n              <input\r\n                type=\"time\"\r\n                id=\"start-time\"\r\n                name=\"start-time\"\r\n                onChange={(e) => setStartTime(e.target.value)}\r\n                value={startTime}\r\n              />\r\n            </div>\r\n            <div className='add-meeting-line-item'>\r\n              <label htmlFor=\"end-time\">End Time:</label>\r\n              <input\r\n                type=\"time\"\r\n                id=\"end-time\"\r\n                name=\"end-time\"\r\n                onChange={(e) => setEndTime(e.target.value)}\r\n                value={endTime}\r\n              />\r\n            </div>\r\n            <div className='add-meeting-line-item'>\r\n              <label htmlFor=\"building\">Select Building:</label>\r\n              {\r\n                isBuildingLoading ?\r\n                  'Loading...' :\r\n                  <select\r\n                    name=\"building\"\r\n                    value={buildingId}\r\n                    onChange={(e) => selectBuilding(e.target.value)}\r\n                  >\r\n                    <option value=\"none\" selected disabled hidden></option>\r\n                    {\r\n                      buildings.map(\r\n                        ({ id, name }) =>\r\n                          <option\r\n                            key={id}\r\n                            value={id}\r\n                          >\r\n                            {name}\r\n                          </option>\r\n                      )\r\n                    }\r\n                  </select>\r\n              }\r\n            </div>\r\n            <Button\r\n              onClick={() => clickNextBtn(!isNextBtnClicked)}\r\n              disabled={!buildingId || !startTime || !endTime || !bookingDate || !bookingTitle}\r\n              value=\"NEXT\"\r\n            />\r\n          </div>\r\n          :\r\n          isBuildingInfoLoading ?\r\n            'Loading...' :\r\n            <div className='rooms-wrapper'>\r\n              <h3>\r\n                {\r\n                  freeMeetingRooms.length ?\r\n                    'Please select one of free rooms' :\r\n                    'No free rooms are available. Please select another building'\r\n                }\r\n              </h3>\r\n              {\r\n                freeMeetingRooms.map(room => (\r\n                  <div\r\n                    className={\r\n                      `rooms-info-block \r\n                      ${room.id === selectedRoomId ? 'selected-room' : ''}`\r\n                    }\r\n                    onClick={() => selectMeetingRoom(room.id)}\r\n                  >\r\n                    <p>{room.name}</p>\r\n                    <p>{buildingInfo.name}</p>\r\n                    <p>Floor: {room.floor}</p>\r\n                  </div>\r\n                ))\r\n              }\r\n              {freeMeetingRooms.length > 0 &&\r\n                <Button\r\n                  onClick={handleScheduleMeeting}\r\n                  disabled={!selectedRoomId}\r\n                  value=\"Schedule Meeting\"\r\n                />\r\n              }\r\n            </div>\r\n      }\r\n    </ReactModal>\r\n  );\r\n};\r\n\r\nAddMeeting.propTypes = {\r\n  isModalOpen: bool,\r\n  toggleModal: func,\r\n  buildings: array,\r\n  isBuildingInfoLoading: bool,\r\n};\r\n\r\nAddMeeting.defaultProps = {\r\n  isModalOpen: false,\r\n  toggleModal: () => { },\r\n  buildings: [],\r\n  isBuildingInfoLoading: true\r\n}\r\n\r\nexport default AddMeeting;\r\n","import React, { useState } from 'react';\r\nimport { get } from 'lodash';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport AddMeeting from '../components/AddMeeting';\r\nimport Button from '../../../components/Button';\r\nimport { BUILDINGS_QUERY, MEETING_ROOMS_QUERY, MEETINGS_QUERY } from '../api/index';\r\nimport { getFreeRooms, getMeetingsGoingOnNow, getTodayMeetings } from '../../../utils/utilFunctions';\r\nimport './HomePage.scss';\r\n\r\nconst HomePage = () => {\r\n  const [isModalOpen, toggleModal] = useState(false);\r\n\r\n  const { data: Buildings, loading: isBuildingLoading } = useQuery(BUILDINGS_QUERY);\r\n  const { data: MeetingRooms, loading: isRoomLoading } = useQuery(MEETING_ROOMS_QUERY);\r\n  const { data: Meetings, loading: areMeetingsLoading } = useQuery(MEETINGS_QUERY);\r\n\r\n  const buildings = get(Buildings, 'Buildings', []);\r\n\r\n  const meetingRooms = get(MeetingRooms, 'MeetingRooms', []);\r\n  const freeRoomsNow = getFreeRooms(meetingRooms);\r\n\r\n  const meetings = get(Meetings, 'Meetings', []);\r\n  const todayMeetings = getTodayMeetings(meetings);\r\n  const currentMeetings = getMeetingsGoingOnNow(meetings);\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className='info-block'>\r\n        <p>Buildings: </p>\r\n        <p>Total: {isBuildingLoading ? 'Loading...' : buildings.length}</p>\r\n      </div>\r\n      <div className='info-block'>\r\n        <p>Rooms: </p>\r\n        <p>Total: {isRoomLoading ? 'Loading...' : meetingRooms.length}</p>\r\n        <p>Free Now: {isRoomLoading ? 'Loading...' : freeRoomsNow.length}</p>\r\n      </div>\r\n      <div className='info-block'>\r\n        <p>Meetings: </p>\r\n        <p>Total: {areMeetingsLoading ? 'Loading...' : meetings.length}</p>\r\n        <p>Today: {areMeetingsLoading ? 'Loading...' : todayMeetings.length}</p>\r\n        <p>Total: {areMeetingsLoading ? 'Loading...' : `${currentMeetings.length} Going on now`}</p>\r\n      </div>\r\n      <Button\r\n        onClick={() => toggleModal(!isModalOpen)}\r\n        value=\"ADD MEETING\"\r\n      />\r\n      {\r\n        isModalOpen &&\r\n        <AddMeeting\r\n          isModalOpen={isModalOpen}\r\n          toggleModal={() => toggleModal(!isModalOpen)}\r\n          buildings={buildings}\r\n          isBuildingLoading={isBuildingLoading}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n\r\n","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport { BASE_ROUTE, HOME_PAGE_ROUTE } from '../models/routes';\r\nimport NoPage from '../components/NoPage';\r\nimport HomePage from '../modules/MeetingOrganizer/pages/HomePage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path={BASE_ROUTE} exact component={HomePage} />\r\n        <Route path={HOME_PAGE_ROUTE} exact component={HomePage} />\r\n        <Route component={NoPage} />\r\n        <Redirect from=\"//*\" to=\"/*\" />\r\n      </Switch>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Routes;","export const BASE_ROUTE = \"/\";\r\nexport const HOME_PAGE_ROUTE = \"/smart-meeting-organizer\";\r\n","import React from 'react';\r\n\r\nimport './App.scss';\r\nimport Routes from '../../routes';\r\n\r\nconst App = () => (\r\n  <div>\r\n    <Routes />\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport App from './containers/App';\r\n\r\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://smart-meeting.herokuapp.com/graphql/\",\r\n  cache: new InMemoryCache(),\r\n  headers: {\r\n    token: 'a123gjhgjsdf6576'\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}